# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import compact_formats_pb2 as compact__formats__pb2

from . import service_pb2 as service__pb2


class CompactTxStreamerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetLatestBlock = channel.unary_unary(
                '/pirate.wallet.sdk.rpc.CompactTxStreamer/GetLatestBlock',
                request_serializer=service__pb2.ChainSpec.SerializeToString,
                response_deserializer=service__pb2.BlockID.FromString,
                )
        self.GetBlock = channel.unary_unary(
                '/pirate.wallet.sdk.rpc.CompactTxStreamer/GetBlock',
                request_serializer=service__pb2.BlockID.SerializeToString,
                response_deserializer=compact__formats__pb2.CompactBlock.FromString,
                )
        self.GetBlockRange = channel.unary_stream(
                '/pirate.wallet.sdk.rpc.CompactTxStreamer/GetBlockRange',
                request_serializer=service__pb2.BlockRange.SerializeToString,
                response_deserializer=compact__formats__pb2.CompactBlock.FromString,
                )
        self.GetARRRPrice = channel.unary_unary(
                '/pirate.wallet.sdk.rpc.CompactTxStreamer/GetARRRPrice',
                request_serializer=service__pb2.PriceRequest.SerializeToString,
                response_deserializer=service__pb2.PriceResponse.FromString,
                )
        self.GetCurrentARRRPrice = channel.unary_unary(
                '/pirate.wallet.sdk.rpc.CompactTxStreamer/GetCurrentARRRPrice',
                request_serializer=service__pb2.Empty.SerializeToString,
                response_deserializer=service__pb2.PriceResponse.FromString,
                )
        self.GetTransaction = channel.unary_unary(
                '/pirate.wallet.sdk.rpc.CompactTxStreamer/GetTransaction',
                request_serializer=service__pb2.TxFilter.SerializeToString,
                response_deserializer=service__pb2.RawTransaction.FromString,
                )
        self.SendTransaction = channel.unary_unary(
                '/pirate.wallet.sdk.rpc.CompactTxStreamer/SendTransaction',
                request_serializer=service__pb2.RawTransaction.SerializeToString,
                response_deserializer=service__pb2.SendResponse.FromString,
                )
        self.GetTaddressTxids = channel.unary_stream(
                '/pirate.wallet.sdk.rpc.CompactTxStreamer/GetTaddressTxids',
                request_serializer=service__pb2.TransparentAddressBlockFilter.SerializeToString,
                response_deserializer=service__pb2.RawTransaction.FromString,
                )
        self.GetTaddressBalance = channel.unary_unary(
                '/pirate.wallet.sdk.rpc.CompactTxStreamer/GetTaddressBalance',
                request_serializer=service__pb2.AddressList.SerializeToString,
                response_deserializer=service__pb2.Balance.FromString,
                )
        self.GetTaddressBalanceStream = channel.stream_unary(
                '/pirate.wallet.sdk.rpc.CompactTxStreamer/GetTaddressBalanceStream',
                request_serializer=service__pb2.Address.SerializeToString,
                response_deserializer=service__pb2.Balance.FromString,
                )
        self.GetMempoolTx = channel.unary_stream(
                '/pirate.wallet.sdk.rpc.CompactTxStreamer/GetMempoolTx',
                request_serializer=service__pb2.Exclude.SerializeToString,
                response_deserializer=compact__formats__pb2.CompactTx.FromString,
                )
        self.GetMempoolStream = channel.unary_stream(
                '/pirate.wallet.sdk.rpc.CompactTxStreamer/GetMempoolStream',
                request_serializer=service__pb2.Empty.SerializeToString,
                response_deserializer=service__pb2.RawTransaction.FromString,
                )
        self.GetTreeState = channel.unary_unary(
                '/pirate.wallet.sdk.rpc.CompactTxStreamer/GetTreeState',
                request_serializer=service__pb2.BlockID.SerializeToString,
                response_deserializer=service__pb2.TreeState.FromString,
                )
        self.GetAddressUtxos = channel.unary_unary(
                '/pirate.wallet.sdk.rpc.CompactTxStreamer/GetAddressUtxos',
                request_serializer=service__pb2.GetAddressUtxosArg.SerializeToString,
                response_deserializer=service__pb2.GetAddressUtxosReplyList.FromString,
                )
        self.GetAddressUtxosStream = channel.unary_stream(
                '/pirate.wallet.sdk.rpc.CompactTxStreamer/GetAddressUtxosStream',
                request_serializer=service__pb2.GetAddressUtxosArg.SerializeToString,
                response_deserializer=service__pb2.GetAddressUtxosReply.FromString,
                )
        self.GetLightdInfo = channel.unary_unary(
                '/pirate.wallet.sdk.rpc.CompactTxStreamer/GetLightdInfo',
                request_serializer=service__pb2.Empty.SerializeToString,
                response_deserializer=service__pb2.LightdInfo.FromString,
                )
        self.Ping = channel.unary_unary(
                '/pirate.wallet.sdk.rpc.CompactTxStreamer/Ping',
                request_serializer=service__pb2.Duration.SerializeToString,
                response_deserializer=service__pb2.PingResponse.FromString,
                )


class CompactTxStreamerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetLatestBlock(self, request, context):
        """Return the height of the tip of the best chain
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBlock(self, request, context):
        """Return the compact block corresponding to the given block identifier
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBlockRange(self, request, context):
        """Return a list of consecutive compact blocks
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetARRRPrice(self, request, context):
        """Get the historical and current prices
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCurrentARRRPrice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTransaction(self, request, context):
        """Return the requested full (not compact) transaction (as from pirated)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendTransaction(self, request, context):
        """Submit the given transaction to the Zcash network
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaddressTxids(self, request, context):
        """Return the txids corresponding to the given t-address within the given block range
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaddressBalance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaddressBalanceStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMempoolTx(self, request, context):
        """Return the compact transactions currently in the mempool; the results
        can be a few seconds out of date. If the Exclude list is empty, return
        all transactions; otherwise return all *except* those in the Exclude list
        (if any); this allows the client to avoid receiving transactions that it
        already has (from an earlier call to this rpc). The transaction IDs in the
        Exclude list can be shortened to any number of bytes to make the request
        more bandwidth-efficient; if two or more transactions in the mempool
        match a shortened txid, they are all sent (none is excluded). Transactions
        in the exclude list that don't exist in the mempool are ignored.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMempoolStream(self, request, context):
        """Return a stream of current Mempool transactions. This will keep the output stream open while
        there are mempool transactions. It will close the returned stream when a new block is mined.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTreeState(self, request, context):
        """GetTreeState returns the note commitment tree state corresponding to the given block.
        See section 3.7 of the Zcash protocol specification. It returns several other useful
        values also (even though they can be obtained using GetBlock).
        The block can be specified by either height or hash.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAddressUtxos(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAddressUtxosStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLightdInfo(self, request, context):
        """Return information about this lightwalletd instance and the blockchain
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """Testing-only, requires lightwalletd --ping-very-insecure (do not enable in production)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CompactTxStreamerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetLatestBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLatestBlock,
                    request_deserializer=service__pb2.ChainSpec.FromString,
                    response_serializer=service__pb2.BlockID.SerializeToString,
            ),
            'GetBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBlock,
                    request_deserializer=service__pb2.BlockID.FromString,
                    response_serializer=compact__formats__pb2.CompactBlock.SerializeToString,
            ),
            'GetBlockRange': grpc.unary_stream_rpc_method_handler(
                    servicer.GetBlockRange,
                    request_deserializer=service__pb2.BlockRange.FromString,
                    response_serializer=compact__formats__pb2.CompactBlock.SerializeToString,
            ),
            'GetARRRPrice': grpc.unary_unary_rpc_method_handler(
                    servicer.GetARRRPrice,
                    request_deserializer=service__pb2.PriceRequest.FromString,
                    response_serializer=service__pb2.PriceResponse.SerializeToString,
            ),
            'GetCurrentARRRPrice': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCurrentARRRPrice,
                    request_deserializer=service__pb2.Empty.FromString,
                    response_serializer=service__pb2.PriceResponse.SerializeToString,
            ),
            'GetTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTransaction,
                    request_deserializer=service__pb2.TxFilter.FromString,
                    response_serializer=service__pb2.RawTransaction.SerializeToString,
            ),
            'SendTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.SendTransaction,
                    request_deserializer=service__pb2.RawTransaction.FromString,
                    response_serializer=service__pb2.SendResponse.SerializeToString,
            ),
            'GetTaddressTxids': grpc.unary_stream_rpc_method_handler(
                    servicer.GetTaddressTxids,
                    request_deserializer=service__pb2.TransparentAddressBlockFilter.FromString,
                    response_serializer=service__pb2.RawTransaction.SerializeToString,
            ),
            'GetTaddressBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaddressBalance,
                    request_deserializer=service__pb2.AddressList.FromString,
                    response_serializer=service__pb2.Balance.SerializeToString,
            ),
            'GetTaddressBalanceStream': grpc.stream_unary_rpc_method_handler(
                    servicer.GetTaddressBalanceStream,
                    request_deserializer=service__pb2.Address.FromString,
                    response_serializer=service__pb2.Balance.SerializeToString,
            ),
            'GetMempoolTx': grpc.unary_stream_rpc_method_handler(
                    servicer.GetMempoolTx,
                    request_deserializer=service__pb2.Exclude.FromString,
                    response_serializer=compact__formats__pb2.CompactTx.SerializeToString,
            ),
            'GetMempoolStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetMempoolStream,
                    request_deserializer=service__pb2.Empty.FromString,
                    response_serializer=service__pb2.RawTransaction.SerializeToString,
            ),
            'GetTreeState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTreeState,
                    request_deserializer=service__pb2.BlockID.FromString,
                    response_serializer=service__pb2.TreeState.SerializeToString,
            ),
            'GetAddressUtxos': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAddressUtxos,
                    request_deserializer=service__pb2.GetAddressUtxosArg.FromString,
                    response_serializer=service__pb2.GetAddressUtxosReplyList.SerializeToString,
            ),
            'GetAddressUtxosStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetAddressUtxosStream,
                    request_deserializer=service__pb2.GetAddressUtxosArg.FromString,
                    response_serializer=service__pb2.GetAddressUtxosReply.SerializeToString,
            ),
            'GetLightdInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLightdInfo,
                    request_deserializer=service__pb2.Empty.FromString,
                    response_serializer=service__pb2.LightdInfo.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=service__pb2.Duration.FromString,
                    response_serializer=service__pb2.PingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pirate.wallet.sdk.rpc.CompactTxStreamer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CompactTxStreamer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetLatestBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pirate.wallet.sdk.rpc.CompactTxStreamer/GetLatestBlock',
            service__pb2.ChainSpec.SerializeToString,
            service__pb2.BlockID.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pirate.wallet.sdk.rpc.CompactTxStreamer/GetBlock',
            service__pb2.BlockID.SerializeToString,
            compact__formats__pb2.CompactBlock.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBlockRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/pirate.wallet.sdk.rpc.CompactTxStreamer/GetBlockRange',
            service__pb2.BlockRange.SerializeToString,
            compact__formats__pb2.CompactBlock.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetARRRPrice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pirate.wallet.sdk.rpc.CompactTxStreamer/GetARRRPrice',
            service__pb2.PriceRequest.SerializeToString,
            service__pb2.PriceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCurrentARRRPrice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pirate.wallet.sdk.rpc.CompactTxStreamer/GetCurrentARRRPrice',
            service__pb2.Empty.SerializeToString,
            service__pb2.PriceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pirate.wallet.sdk.rpc.CompactTxStreamer/GetTransaction',
            service__pb2.TxFilter.SerializeToString,
            service__pb2.RawTransaction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pirate.wallet.sdk.rpc.CompactTxStreamer/SendTransaction',
            service__pb2.RawTransaction.SerializeToString,
            service__pb2.SendResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTaddressTxids(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/pirate.wallet.sdk.rpc.CompactTxStreamer/GetTaddressTxids',
            service__pb2.TransparentAddressBlockFilter.SerializeToString,
            service__pb2.RawTransaction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTaddressBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pirate.wallet.sdk.rpc.CompactTxStreamer/GetTaddressBalance',
            service__pb2.AddressList.SerializeToString,
            service__pb2.Balance.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTaddressBalanceStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/pirate.wallet.sdk.rpc.CompactTxStreamer/GetTaddressBalanceStream',
            service__pb2.Address.SerializeToString,
            service__pb2.Balance.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMempoolTx(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/pirate.wallet.sdk.rpc.CompactTxStreamer/GetMempoolTx',
            service__pb2.Exclude.SerializeToString,
            compact__formats__pb2.CompactTx.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMempoolStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/pirate.wallet.sdk.rpc.CompactTxStreamer/GetMempoolStream',
            service__pb2.Empty.SerializeToString,
            service__pb2.RawTransaction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTreeState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pirate.wallet.sdk.rpc.CompactTxStreamer/GetTreeState',
            service__pb2.BlockID.SerializeToString,
            service__pb2.TreeState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAddressUtxos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pirate.wallet.sdk.rpc.CompactTxStreamer/GetAddressUtxos',
            service__pb2.GetAddressUtxosArg.SerializeToString,
            service__pb2.GetAddressUtxosReplyList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAddressUtxosStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/pirate.wallet.sdk.rpc.CompactTxStreamer/GetAddressUtxosStream',
            service__pb2.GetAddressUtxosArg.SerializeToString,
            service__pb2.GetAddressUtxosReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLightdInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pirate.wallet.sdk.rpc.CompactTxStreamer/GetLightdInfo',
            service__pb2.Empty.SerializeToString,
            service__pb2.LightdInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pirate.wallet.sdk.rpc.CompactTxStreamer/Ping',
            service__pb2.Duration.SerializeToString,
            service__pb2.PingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
